# -*- coding: utf-8 -*-
"""Copy of 6 Despliegue - CarRisk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p4I4F_3eHl72RheLsOOXaV7hZ26APiS-

# Despliegue
* Cargamos el modelo
* Cargamos los datos futuros
* Preparar los datos futuros
* Aplicamos el modelo para la prediccion
"""

#Importamos librerías básicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gráfica

#Cargamos el modelo
import pickle
filename = 'modelo-RF-hiper.pkl'
modelRF,labelencoder,variables = pickle.load(open(filename, 'rb'))

#Cargamos los datos futuros
#data = pd.read_csv("datos_predictores_ejemplo.csv")
#data.head()

#Aqui va el HTML
#Se crea interfaz gráfica con streamlit para captura de los datos

import streamlit as st

st.title('Predicción de riesgo de Suicidio')

# Campos de entrada basados en las variables
localidad_residencia = st.selectbox('Localidad de Residencia', [
    'Usaquén', 'Chapinero', 'Santa Fe', 'San Cristóbal', 'Usme', 'Tunjuelito',
    'Bosa', 'Kennedy', 'Fontibón', 'Engativá', 'Suba', 'Barrios Unidos',
    'Teusaquillo', 'Los Mártires', 'Antonio Nariño', 'Puente Aranda',
    'La Candelaria', 'Rafael Uribe Uribe', 'Ciudad Bolívar', 'Sumapaz'
])

ciclovital = st.selectbox('Ciclo Vital', [
    '0 – 5 Primera Infancia', '6 – 11 Infancia', '12 – 17 Adolescencia',
    '18 – 28 Juventud', '29 – 59 Adultez', '>60 Vejez'
])

sexo = st.selectbox('Sexo', ['Femenino', 'Masculino'])

niveleducativo = st.selectbox('Nivel Educativo', [
    '1. No fue a la escuela', '2. Preescolar', '3. Primaria incompleta',
    '4. Primaria completa', '5. Secundaria incompleta', '6. Secundaria completa',
    '7. Técnico post-secundaria incompleta', '8. Técnico post-secundaria completa',
    '9. Universidad incompleta', '10. Universidad completa',
    '11. Postgrado incompleto', '12. Postgrado completo'
])

maltrato_sexual = st.selectbox('¿Ha sufrido maltrato sexual?', [0, 1])
conflicto_pareja = st.selectbox('¿Conflictos con la pareja?', [0, 1])
problemas_economicos = st.selectbox('¿Tiene problemas económicos?', [0, 1])
esc_educ = st.selectbox('¿Escenario educativo problemático?', [0, 1])
suicidio_amigo = st.selectbox('¿Conoció a alguien que cometió suicidio?', [0, 1])

poblacion_diferencial = st.selectbox('Población Diferencial', [
    'Ninguna', 'Otra', 'Madre Cabeza de Hogar', 'Consumidor habitual de SPA',
    'Población LGBTIQ+', 'Servidor público', 'En Protección', 'Menor Abandonado',
    'Trabajador Informal', 'Otro tipo de víctima del conflicto'
])

# Crear DataFrame
datos = [[
    localidad_residencia, ciclovital, sexo, niveleducativo,
    maltrato_sexual, conflicto_pareja, problemas_economicos,
    esc_educ, suicidio_amigo, poblacion_diferencial
]]

columnas = [
    'localidad_residencia', 'ciclovital', 'sexo', 'niveleducativo',
    'maltrato_sexual', 'conflicto_pareja', 'problemas_economicos',
    'esc_educ', 'suicidio_amigo', 'poblacion_diferencial'
]

df = pd.DataFrame(datos, columns=columnas)

st.subheader("Datos ingresados")
st.write(df)

#Se realiza la preparación debe ser igual al aprendizaje
data_preparada=df.copy()
data_preparada = pd.get_dummies(data_preparada, columns=['localidad_residencia', 'ciclovital', 'niveleducativo', 'poblacion_diferencial','sexo'], drop_first=False, dtype=int) #Despliegue siempre drop_first en false

data_preparada.head()

#Se adicionan las columnas faltantes
data_preparada=data_preparada.reindex(columns=variables,fill_value=0)
data_preparada.head()

"""# **Predicciones**"""

# Predicción
Y_fut = modelRF.predict(data_preparada)

# Decodificar la predicción si el modelo fue entrenado con etiquetas codificadas
prediccion = labelencoder.inverse_transform(Y_fut)

# Mostrar resultado en Streamlit
st.subheader("Prediccion")
st.write(f"**Resultado:** {prediccion[0]}")